name: Build and Publish Wheels

on:
  release:
    types: [published]

jobs:
  build_wheels_linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel
          python -m pip install Cython
          python -m pip install -r requirements.txt
          python -m pip install -r requirements_dev.txt
          python -m pip install -r requirements_doc.txt
          python -m pip install -r requirements_test.txt
          python -m pip install build repairwheel

      - name: Clean dist folder
        run: |
          rm -rf dist
          mkdir dist

      - name: Build extensions
        run: |
          python setup.py build_ext --inplace

      - name: Build wheel
        run: |
          python -m build --wheel

      - name: Repair wheels with repairwheel
        run: |
          for whl in dist/*.whl; do
            repairwheel -o dist/ "$whl"
            rm "$whl"
          done

      - name: Upload Linux wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-linux
          path: dist/*.whl

  build_wheels_windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel
          python -m pip install Cython
          python -m pip install -r requirements.txt
          python -m pip install -r requirements_dev.txt
          python -m pip install -r requirements_doc.txt
          python -m pip install -r requirements_test.txt
          python -m pip install build

      - name: Clean dist folder
        run: |
          rm -rf dist
          mkdir dist

      - name: Build extensions
        run: |
          python setup.py build_ext --inplace

      - name: Build wheel
        run: |
          python -m build --wheel

      - name: Upload Windows wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-windows
          path: dist/*.whl

  build_wheels_macos:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install setuptools wheel
          python -m pip install Cython
          python -m pip install -r requirements.txt
          python -m pip install -r requirements_dev.txt
          python -m pip install -r requirements_doc.txt
          python -m pip install -r requirements_test.txt
          python -m pip install build

      - name: Clean dist folder
        run: |
          rm -rf dist
          mkdir dist

      - name: Build extensions
        run: |
          python setup.py build_ext --inplace

      - name: Build wheel
        run: |
          python -m build --wheel

      - name: Upload MacOS wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels-macos
          path: dist/*.whl

  publish_wheels:
    needs: [build_wheels_linux, build_wheels_windows, build_wheels_macos]
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels-linux

      - name: Download Windows wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels-windows

      - name: Download MacOS wheels
        uses: actions/download-artifact@v3
        with:
          name: wheels-macos

      - name: Publish wheels to PyPI
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
        run: |
          pip install twine
          twine upload dist/*.whl
